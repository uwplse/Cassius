#lang racket
(require "macros_extr.rkt")
(provide ifAnd)


(define list_eq_dec (lambdas (eq_dec l l~)
  (match l
     ((Nil)
       (match l~
          ((Nil) `(Left))
          ((Cons a l0) `(Right))))
     ((Cons y l0)
       (match l~
          ((Nil) `(Right))
          ((Cons a0 l1)
            (match (@ eq_dec y a0)
               ((Left)
                 (match (@ list_eq_dec eq_dec l0 l1)
                    ((Left) `(Left))
                    ((Right) `(Right))))
               ((Right) `(Right)))))))))
  
(define map (lambdas (f l)
  (match l
     ((Nil) `(Nil))
     ((Cons a t) `(Cons ,(f a) ,(@ map f t))))))
  
(define restEqDec (lambdas (l r) (if (eq? l r) `(Left) `(Right))))

(define exprEqDec (lambdas (l r)
  (match l
     ((If a b c)
       (match r
          ((If a0 b0 c0)
            (match (@ exprEqDec a a0)
               ((Left)
                 (match (@ exprEqDec b b0)
                    ((Left)
                      (match (@ exprEqDec c c0)
                         ((Left) `(Left))
                         ((Right) `(Right))))
                    ((Right) `(Right))))
               ((Right) `(Right))))
          ((And l0) `(Right))
          ((Or l0) `(Right))
          ((Imply a0 b0) `(Right))
          ((Not a0) `(Right))
          ((Unknown r0 l0) `(Right))
          ((UnknownAtom r0) `(Right))))
     ((And l0)
       (match r
          ((If a b c) `(Right))
          ((And l1)
            (match (@ list_eq_dec exprEqDec l0 l1)
               ((Left) `(Left))
               ((Right) `(Right))))
          ((Or l1) `(Right))
          ((Imply a b) `(Right))
          ((Not a) `(Right))
          ((Unknown r0 l1) `(Right))
          ((UnknownAtom r0) `(Right))))
     ((Or l0)
       (match r
          ((If a b c) `(Right))
          ((And l1) `(Right))
          ((Or l1)
            (match (@ list_eq_dec exprEqDec l0 l1)
               ((Left) `(Left))
               ((Right) `(Right))))
          ((Imply a b) `(Right))
          ((Not a) `(Right))
          ((Unknown r0 l1) `(Right))
          ((UnknownAtom r0) `(Right))))
     ((Imply a b)
       (match r
          ((If a0 b0 c) `(Right))
          ((And l0) `(Right))
          ((Or l0) `(Right))
          ((Imply a0 b0)
            (match (@ exprEqDec a a0)
               ((Left)
                 (match (@ exprEqDec b b0)
                    ((Left) `(Left))
                    ((Right) `(Right))))
               ((Right) `(Right))))
          ((Not a0) `(Right))
          ((Unknown r0 l0) `(Right))
          ((UnknownAtom r0) `(Right))))
     ((Not a)
       (match r
          ((If a0 b c) `(Right))
          ((And l0) `(Right))
          ((Or l0) `(Right))
          ((Imply a0 b) `(Right))
          ((Not a0)
            (match (@ exprEqDec a a0)
               ((Left) `(Left))
               ((Right) `(Right))))
          ((Unknown r0 l0) `(Right))
          ((UnknownAtom r0) `(Right))))
     ((Unknown r0 l0)
       (match r
          ((If a b c) `(Right))
          ((And l1) `(Right))
          ((Or l1) `(Right))
          ((Imply a b) `(Right))
          ((Not a) `(Right))
          ((Unknown r1 l1)
            (match (@ restEqDec r0 r1)
               ((Left)
                 (match (@ list_eq_dec exprEqDec l0 l1)
                    ((Left) `(Left))
                    ((Right) `(Right))))
               ((Right) `(Right))))
          ((UnknownAtom r1) `(Right))))
     ((UnknownAtom r0)
       (match r
          ((If a b c) `(Right))
          ((And l0) `(Right))
          ((Or l0) `(Right))
          ((Imply a b) `(Right))
          ((Not a) `(Right))
          ((Unknown r1 l0) `(Right))
          ((UnknownAtom r1)
            (match (@ restEqDec r0 r1)
               ((Left) `(Left))
               ((Right) `(Right)))))))))
  
(define ifAndR (lambda (ex)
  (match ex
     ((If a b c) `(If ,a ,b ,c))
     ((And l)
       (match l
          ((Nil) `(And ,`(Nil)))
          ((Cons e0 l0)
            (match e0
               ((If a b c)
                 (match l0
                    ((Nil) `(And ,`(Cons ,`(If ,a ,b ,c) ,`(Nil))))
                    ((Cons e1 l1)
                      (match e1
                         ((If d e f)
                           (match l1
                              ((Nil)
                                (match (@ exprEqDec a d)
                                   ((Left) `(And ,`(Cons ,`(If ,a
                                     ,(ifAndR `(And ,`(Cons ,b ,`(Cons ,e
                                        ,`(Nil)))))
                                     ,(ifAndR `(And ,`(Cons ,c ,`(Cons ,f
                                        ,`(Nil)))))) ,`(Nil))))
                                   ((Right) `(And ,`(Cons ,`(If ,a ,b ,c)
                                     ,`(Cons ,`(If ,d ,e ,f) ,`(Nil)))))))
                              ((Cons e2 l2) `(And ,`(Cons ,`(If ,a ,b ,c)
                                ,`(Cons ,`(If ,d ,e ,f) ,`(Cons ,e2 ,l2)))))))
                         ((And l2) `(And ,`(Cons ,`(If ,a ,b ,c) ,`(Cons
                           ,`(And ,l2) ,l1))))
                         ((Or l2) `(And ,`(Cons ,`(If ,a ,b ,c) ,`(Cons ,`(Or
                           ,l2) ,l1))))
                         ((Imply a0 b0) `(And ,`(Cons ,`(If ,a ,b ,c) ,`(Cons
                           ,`(Imply ,a0 ,b0) ,l1))))
                         ((Not a0) `(And ,`(Cons ,`(If ,a ,b ,c) ,`(Cons
                           ,`(Not ,a0) ,l1))))
                         ((Unknown r l2) `(And ,`(Cons ,`(If ,a ,b ,c)
                           ,`(Cons ,`(Unknown ,r ,l2) ,l1))))
                         ((UnknownAtom r) `(And ,`(Cons ,`(If ,a ,b ,c)
                           ,`(Cons ,`(UnknownAtom ,r) ,l1))))))))
               ((And l1) `(And ,`(Cons ,`(And ,l1) ,l0)))
               ((Or l1) `(And ,`(Cons ,`(Or ,l1) ,l0)))
               ((Imply a b) `(And ,`(Cons ,`(Imply ,a ,b) ,l0)))
               ((Not a) `(And ,`(Cons ,`(Not ,a) ,l0)))
               ((Unknown r l1) `(And ,`(Cons ,`(Unknown ,r ,l1) ,l0)))
               ((UnknownAtom r) `(And ,`(Cons ,`(UnknownAtom ,r) ,l0)))))))
     ((Or l) `(Or ,l))
     ((Imply a b) `(Imply ,a ,b))
     ((Not a) `(Not ,a))
     ((Unknown r l) `(Unknown ,r ,l))
     ((UnknownAtom r) `(UnknownAtom ,r)))))
  
(define ifAnd (lambda (ex)
  (match ex
     ((If a b c) `(If ,(ifAnd a) ,(ifAnd b) ,(ifAnd c)))
     ((And l)
       (match l
          ((Nil) `(And ,(@ map ifAnd l)))
          ((Cons l0 l1)
            (match l1
               ((Nil) `(And ,(@ map ifAnd l)))
               ((Cons r l2)
                 (match l2
                    ((Nil) (ifAndR ex))
                    ((Cons e l3) `(And ,(@ map ifAnd l)))))))))
     ((Or l) `(Or ,(@ map ifAnd l)))
     ((Imply l r) `(Imply ,(ifAnd l) ,(ifAnd r)))
     ((Not a) `(Not ,(ifAnd a)))
     ((Unknown r l) `(Unknown ,r ,(@ map ifAnd l)))
     ((UnknownAtom r) `(UnknownAtom ,r)))))
  
