;; -*- mode: scheme -*-

(page yoga (load "fwt.rkt" doc-080)
      :w (between 800 1920)
      :h (between 600 1280)
      :fs (between 16 32))

(page surf (load "fwt.rkt" doc-093)
      :w (between 800 1920)
      :h (between 600 1280)
      :fs (between 16 32))

(page park (load "fwt.rkt" doc-003)
      :w (between 800 1920)
      :h (between 600 1280)
      :fs (between 16 32))

;; The core theorem: links, inputs, and buttons are at least scrollable to

(define (onscreen b)
  (and (>= (top b) 0) (>= (left b) 0)))

(define (is-interactive b)
  (matches b (tag a)))

(theorem (interactive-onscreen b)
  (=> (is-interactive b) (onscreen b)))

;; This is a trivial proof of it, using a single component / whole page approach

(proof (trivial interactive-onscreen yoga surf park)
  (assert root (forall (b) (=> (is-interactive b) (onscreen b)))))

;; A proof that we mention in the overview section

(proof (yoga-page interactive-onscreen yoga)
  (component header (id header))
  (component body (id body))
  (component footer (id footer))

  (page * (forall (b) (=> (is-interactive b) (onscreen b)))))

;; The final proof in the overview section

(proof (yoga-simple interactive-onscreen yoga)
  (component header (id header))
  (component body (id body))
  (component footer (id footer))

  (assert * (non-negative-margins ?))

  (assert root (=> (no-floats-exit header) (>= (width footer) 200)))
  (assert root (=> (no-floats-exit header)
                   (and (onscreen header) (onscreen body) (onscreen footer))))

  (assert header
    (forall (a)
            (=> (onscreen header) (is-interactive a) (onscreen a))))

  (assert footer
    (forall (a)
            (=> (no-floats-enter footer)
                (>= (width footer) 200)
                (onscreen footer)
                (=> (is-interactive a) (onscreen a)))))

  (page root (and (no-floats-exit header) (no-floats-enter footer))))

;; The fully-componentized proof of the yoga page

(proof (yoga-full interactive-onscreen yoga)
  (component header (id header))
  (component body (id body))
  (component footer (id footer))

  (assert root (>= (width footer) 200))
  (assert root (and (onscreen header) (onscreen body) (onscreen footer)))

  (assert header
    (forall (a)
            (=> (onscreen header) (is-interactive a) (onscreen a))))

  (assert footer
    (forall (a)
            (=> (no-floats-enter footer)
                (>= (width footer) 200)
                (onscreen footer)
                (=> (is-interactive a) (onscreen a)))))

  (assert * (=> (no-floats-enter ?) (no-floats-exit ?)))
  (assert root (no-floats-enter root))
  (assert root (float-flow-in root header))
  (assert root (float-flow-across header body footer))
  (assert * (non-negative-margins ?)))

;; A proof that works for the surf page

(proof (surf interactive-onscreen surf)
  (component header (id header))
  (component body (id body))
  (component footer (id footer))
  (component nav (id navigation))
  (component home (id home))

  ;; TODO: it would be helpful if there were a "pre" command that set
  ;; a common precondition for `home` and `nav`, instead of having to
  ;; duplicate it everywhere.

  (assert (- * home nav)
          (forall (b) (=> (onscreen ?) (no-floats-enter ?)
                          (or (is-interactive b) (is-component b)) (onscreen b))))
  (assert nav (forall (b) (=> (onscreen ?) (< (floats-tracked ?) 2)
                              (or (is-interactive b) (is-component b)) (onscreen b))))
  (assert home (forall (b) (=> (onscreen ?) (< (floats-tracked ?) 2)
                               (or (is-interactive b) (is-component b)) (onscreen b))))

  (assert root (onscreen root))
  (assert root (= (floats-tracked root) 0))

  (assert (- * home nav) (non-negative-margins ?))
  (assert (or home nav) (=> (< (floats-tracked ?) 2) (non-negative-margins ?)))

  (assert (- * home nav) (> (height ?) 0))
  (assert (or home nav) (=> (< (floats-tracked ?) 2) (non-negative-margins ?)))
  (assert (- * home nav) (=> (no-floats-enter ?) (no-floats-exit ?)))
  (assert (or home nav) (=> (< (floats-tracked ?) 2) (non-negative-margins ?)))

  (assert root (float-flow-in root header))
  (assert root (float-flow-across header body footer))
  (assert body (float-flow-skip body))

  (assert body (forall (_) (< (floats-tracked nav) 2)))
  (assert body (forall (_) (< (floats-tracked home) 2)))
  (assert body (=> (no-floats-enter body) (no-floats-exit body)))

  (assert root (no-floats-enter root)))

;; A proof that works for the amusement park page
;; It is largely derived from the surf proof

(proof (park interactive-onscreen park)
  (component header (id header))
  (component figure (id figure))
  (component section (id section))
  (component footer (id footer))

  (assert * (forall (b) (=> (onscreen ?) (>= (width ?) 960)
                            (no-floats-enter ?)
                            (or (is-interactive b) (is-component b)) (onscreen b))))

  (assert root (forall (b) (=> (and (is-component b) (not (= b root))) (= (width b) 960))))
  (assert root (forall (b) (=> (or (is-interactive b) (is-component b)) (onscreen b))))
  (assert root (onscreen root))
  (assert root (no-floats-enter root))

  (assert * (non-negative-margins ?))

  (assert * (=> (no-floats-enter ?) (no-floats-exit ?)))
  (assert * (> (height ?) 0))
  (assert * (float-flow-skip ?))

  (assert root (no-floats-enter root))
  (assert root (float-flow-in root header))
  (assert root (float-flow-across header figure section footer)))

;; Three specific things tested with components

(page carshop (load "fwt.rkt" doc-022)
      :w (between 800 1920)
      :h (between 600 1280)
      :fs (between 16 32))

(theorem (button-large b)
  (=> (matches b (child (desc (id body) (class body) (tag div)) (tag a)))
      (and (>= (height b) 24) (>= (width b) 72))))

(proof (button-large button-large carshop)
  (component body (desc (id body) (class body)))
  (assert body (forall (b) (=> (matches b (child (desc (id body) (class body) (tag div)) (tag a)))
                               (and (>= (height b) 24) (>= (width b) 72))))))

#|
Supposed to fail
(page generic (load "fwt.rkt" doc-047)
      :w (between 800 1920)
      :h (between 600 1280)
      :fs (between 16 32))

(theorem (visible-text b)
  (=> (descends b (desc (class body) (tag ul) (tag li))) (has-type b text)
      (within b (ancestor b (matches ? (desc (class body) (tag ul) (tag li)))))))

(proof (visible-text visible-text generic)
  (components (child (class blog) (tag li)))
  (assert * (forall (b) (=> (raw (= (ez.in ?) ez.init)) (matches ? (tag li)) (has-type b text) (within b ?)))))
|#

(page tailorshop (load "fwt.rkt" doc-091)
      :w (between 800 1920)
      :h (between 600 1280)
      :fs (between 16 32))

(theorem (three-column b1 b2)
  (and
   (=> (matches b1 (child (id featured) (class first) (tag div)))
       (matches b2 (child (id featured) (class first) (tag span)))
       (and (= (top b1 outer) (top b2 outer))
            (<= (right b1 outer) (left b2 outer))))
   (=> (matches b1 (child (id featured) (class first) (tag span)))
       (matches b2 (child (id featured) (class last)))
       (and (= (top b1 outer) (top b2 outer))
            (<= (right b1 outer) (left b2 outer))))
   (=> (matches b1 (child (id home) (class section)))
       (matches b2 (child (id home) (class sidebar)))
       (and (= (top b1 outer) (top b2 outer))
            (<= (right b1 outer) (left b2 outer))))
   (=> (matches b1 (desc (id footer) (class first)))
       (matches b2 (desc (id footer) (class last)))
       (and (= (top b1 outer) (top b2 outer))
            (<= (right b1 outer) (left b2 outer))))))

(proof (three-column three-column tailorshop)
  (component featured (id featured))
  (component home (id home))
  (component footer (id footer))
  (assert featured (forall (b1 b2)
       (=> (= (width featured) 950)
           (matches b1 (child (id featured) (class first) (tag div)))
           (matches b2 (child (id featured) (class first) (tag span)))
           (and (= (top b1 outer) (top b2 outer))
                (<= (right b1 outer) (left b2 outer))))))
  (assert featured (forall (b1 b2)
       (=> (= (width featured) 950)
           (matches b1 (child (id featured) (class first) (tag span)))
           (matches b2 (child (id featured) (class last)))
           (and (= (top b1 outer) (top b2 outer))
                (<= (right b1 outer) (left b2 outer))))))
  (assert home (forall (b1 b2)
       (=> (= (width home) 940)
           (matches b1 (child (id home) (class section)))
           (matches b2 (child (id home) (class sidebar)))
           (and (= (top b1 outer) (top b2 outer))
                (<= (right b1 outer) (left b2 outer))))))
  (assert footer (forall (b1 b2)
       (=> (= (width footer) 940)
           (no-floats-enter footer)
           (matches b1 (desc (id footer) (class first)))
           (matches b2 (desc (id footer) (class last)))
           (and (= (top b1 outer) (top b2 outer))
                (<= (right b1 outer) (left b2 outer))))))
  (assert * (non-negative-margins ?))
  (assert * (=> (no-floats-enter ?) (no-floats-exit ?)))
  (assert root (float-flow-across featured home footer))
  (assert root (float-flow-in root featured))
  (assert root (no-floats-enter root))
  (assert root (and (= (width featured) 950) (= (width home) 940) (= (width footer) 940))))

(page puppy (load "fwt.rkt" doc-079)
      :w (between 800 1920)
      :h (between 600 1280)
      :fs (between 16 32))

(theorem (no-text-on-picture b1 b2)
  (=> (matches b1 (child (id background) (tag div)))
      (has-type b2 text)
      (descends b2 (child (id background) (tag div)))
      (<= (right b2) (- (right b1 content) 300))))

(proof (no-text-on-picture no-text-on-picture puppy)
  (component bg (child (id background) (tag div)))
  (assert bg (forall (b2) (=> (>= (width bg) 940) (has-type b2 text) (<= (right b2) (- (right bg content) 300)))))
  (assert root (>= (width bg) 940)))

;; A theorem about line width, from the VizAssert paper

(define (line b)
  (ancestor b (has-type ? line)))

(define (width-line b)
  (- (right (last b)) (left (first b))))

(theorem (line-width b)
  (=> (has-type b text) (has-contents b)
      (!= (first (line b)) null)
      (<= (width-line (line b)) (* 80 (/ 10 19) (height b)))))

(proof (line-width line-width yoga)
  (component header (id header))
  (component body (id body))
  (component footer (id footer))
  (assert * (forall (b) (=> (raw (= (font-size.px (style.font-size (computed-style (box-elt ?)))) 14))
                            (has-type b text) (has-contents b)
                            (!= (first (line b)) null)
                            (<= (width-line (line b)) (* 80 (/ 10 19) (height b))))))
  (assert root (raw (= (font-size.px (style.font-size (computed-style (box-elt header)))) 14)))
  (assert root (raw (= (font-size.px (style.font-size (computed-style (box-elt body)))) 14)))
  (assert root (raw (= (font-size.px (style.font-size (computed-style (box-elt footer)))) 14))))
