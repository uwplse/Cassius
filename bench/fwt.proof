;; -*- mode: scheme -*-

(import "common.thm")

(page yoga (load "fwt.rkt" doc-080)
      :w (between 800 1920)
      :h (between 600 1280)
      :fs (between 16 32))

(page surf (load "fwt.rkt" doc-093)
      :w (between 800 1920)
      :h (between 600 1280)
      :fs (between 16 32))

(page park (load "fwt.rkt" doc-003)
      :w (between 800 1920)
      :h (between 600 1280)
      :fs (between 16 32))

;; This is a trivial proof of it, using a single component / whole page approach

(proof (trivial interactive-onscreen yoga surf park)
  (page root (forall (b) (=> (is-interactive b) (onscreen b)))))

;; A proof that we mention in the overview section

(proof (yoga-page interactive-onscreen yoga)
  (component header (id header))
  (component body (id body))
  (component footer (id footer))

  (page * (forall (b) (=> (is-interactive b) (onscreen b)))))

;; The final proof in the overview section

(proof (yoga-simple interactive-onscreen yoga)
  (component header (id header))
  (component body (id body))
  (component footer (id footer))

  (assert (or header footer)
          (forall (a) (=> (onscreen ?) (is-interactive a) (onscreen a))))
  (assert root (onscreen header))
  (assert root (onscreen footer))

  (pre footer (no-floats-enter footer))
  (page root (no-floats-enter footer))

  (pre footer (>= (width footer) 200))
  (assert root (>= (width footer) 200))

  (pre root (no-floats-exit header))
  (assert * (non-negative-margins ?))
  (page header (no-floats-exit header)))

;; The fully-componentized proof of the yoga page

(proof (yoga-full interactive-onscreen yoga)
  (component header (id header))
  (component body (id body))
  (component footer (id footer))

  (assert * (forall (a) (=> (onscreen ?) (is-interactive a) (onscreen a))))
  (assert root (and (onscreen header) (onscreen body) (onscreen footer)))

  (pre footer (>= (width footer) 200))
  (assert root (>= (width footer) 200))

  (pre footer (no-floats-enter footer))
  (assert * (=> (no-floats-enter ?) (no-floats-exit ?)))
  (assert root (no-floats-enter root))
  (assert root (float-flow-in root header))
  (assert root (float-flow-across header body footer))
  (assert * (non-negative-margins ?)))

;; A proof that works for the surf page
(proof (surf interactive-onscreen surf)
  (component header (id header))
  (component body (id body))
  (component footer (id footer))
  (component nav (id navigation))
  (component home (id home))

  (assert (- * nav home)
          (forall (b) (=> (no-floats-enter ?)
                          (onscreen ?) (or (is-interactive b) (is-component b)) (onscreen b))))
  (assert (or nav home)
          (forall (b) (=> (onscreen ?) (or (is-interactive b) (is-component b)) (onscreen b))))

  (assert root (onscreen root))
  (assert root (= (floats-tracked root) 0))

  (assert * (non-negative-margins ?))
  (assert * (> (height ?) 0))

  (pre (or nav home) (< (floats-tracked ?) 2))
  (assert body (forall (_) (< (floats-tracked nav) 2)))
  (assert body (forall (_) (< (floats-tracked home) 2)))

  (assert * (=> (no-floats-enter ?) (no-floats-exit ?)))
  (assert root (float-flow-in root header))
  (assert root (float-flow-across header body footer))
  (assert body (float-flow-skip body))

  (assert root (no-floats-enter root)))

;; A proof that works for the amusement park page
;; It is largely derived from the surf proof

(proof (park interactive-onscreen park)
  (component header (id header))
  (component figure (id figure))
  (component section (id section))
  (component footer (id footer))

  (pre (- * root) (>= (width ?) 960))
  (assert * (forall (b) (=> (onscreen ?) (or (is-interactive b) (is-component b)) (onscreen b))))

  (pre (- * root) (no-floats-enter ?))
  (assert root (= (width header) (width figure) (width section) (width footer) 960))
  (assert root (onscreen root))
  (assert root (no-floats-enter root))

  (assert * (non-negative-margins ?))

  (assert * (=> (no-floats-enter ?) (no-floats-exit ?)))
  (assert * (> (height ?) 0))
  (assert * (float-flow-skip ?))

  (assert root (no-floats-enter root))
  (assert root (float-flow-in root header))
  (assert root (float-flow-across header figure section footer)))

;; Three specific things tested with components

(page carshop (load "fwt.rkt" doc-022)
      :w (between 800 1920)
      :h (between 600 1280)
      :fs (between 16 32))

(proof (button-large button-large carshop)
  (component body (desc (id body) (class body)))
  (assert body (forall (b) (=> (carshop-button b) (and (>= (height b) 24) (>= (width b) 72))))))

#| Supposed to fail
(page generic (load "fwt.rkt" doc-047)
      :w (between 800 1920)
      :h (between 600 1280)
      :fs (between 16 32))

(theorem (visible-text b)
  (=> (descends b (desc (class body) (tag ul) (tag li))) (has-type b text)
      (within b (ancestor b (matches ? (desc (class body) (tag ul) (tag li)))))))

(proof (visible-text visible-text generic)
  (components (child (class blog) (tag li)))
  (assert * (forall (b) (=> (raw (= (ez.in ?) ez.init)) (matches ? (tag li)) (has-type b text) (within b ?)))))
|#

(page tailorshop (load "fwt.rkt" doc-091)
      :w (between 800 1920)
      :h (between 600 1280)
      :fs (between 16 32))

(define (col1 b1 b2)
  (=> (matches b1 (child (id featured) (class first) (tag div)))
      (matches b2 (child (id featured) (class first) (tag span)))
      (and (= (top b1 outer) (top b2 outer))
           (<= (right b1 outer) (left b2 outer)))))
(define (col2 b1 b2)
  (=> (matches b1 (child (id featured) (class first) (tag span)))
      (matches b2 (child (id featured) (class last)))
      (and (= (top b1 outer) (top b2 outer))
           (<= (right b1 outer) (left b2 outer)))))
(define (col3 b1 b2)
  (=> (matches b1 (child (id home) (class section)))
      (matches b2 (child (id home) (class sidebar)))
      (and (= (top b1 outer) (top b2 outer))
           (<= (right b1 outer) (left b2 outer)))))
(define (col4 b1 b2)
  (=> (matches b1 (desc (id footer) (class first)))
      (matches b2 (desc (id footer) (class last)))
      (and (= (top b1 outer) (top b2 outer))
           (<= (right b1 outer) (left b2 outer)))))

(theorem (three-column b1 b2)
  (and
   (col1 b1 b2)
   (col2 b1 b2)
   (col3 b1 b2)
   (col4 b1 b2)))

(proof (three-column three-column tailorshop)
  (component featured (id featured))
  (component home (id home))
  (component footer (id footer))

  (assert featured (forall (b1 b2) (col1 b1 b2)))
  (assert featured (forall (b1 b2) (col2 b1 b2)))
  (assert home (forall (b1 b2) (col3 b1 b2)))
  (assert footer (forall (b1 b2) (col4 b1 b2)))

  (assert root (and (= (width featured) 950) (= (width home) 940) (= (width footer) 940)))
  (pre featured (= (width featured) 950))
  (pre home (= (width home) 940))
  (pre footer (= (width footer) 940))

  (pre footer (no-floats-enter footer))
  (assert * (non-negative-margins ?))
  (assert * (=> (no-floats-enter ?) (no-floats-exit ?)))
  (assert root (float-flow-across featured home footer))
  (assert root (float-flow-in root featured))
  (assert root (no-floats-enter root)))

(page puppy (load "fwt.rkt" doc-079)
      :w (between 800 1920)
      :h (between 600 1280)
      :fs (between 16 32))

(theorem (no-text-on-picture b1 b2)
  (=> (matches b1 (child (id background) (tag div)))
      (has-type b2 text)
      (descends b2 (child (id background) (tag div)))
      (<= (right b2) (- (right b1 content) 300))))

(proof (no-text-on-picture no-text-on-picture puppy)
  (component bg (child (id background) (tag div)))
  (assert bg (forall (b2) (=> (has-type b2 text) (<= (right b2) (- (right bg content) 300)))))
  (pre bg (>= (width bg) 940))
  (assert root (>= (width bg) 940)))

;; A theorem about line width, from the VizAssert paper

(define (14-px-text b)
  (<= 13 (text-height b) 15)
  #;(raw (= (font-size.px (style.font-size (computed-style (box-elt b)))) 14)))

(proof (line-width line-width yoga)
  (component header (id header))
  (component body (id body))
  (component footer (id footer))
  (assert * (forall (b) (=> (has-type b text) (has-contents b)
                            (!= (first (line b)) null)
                            (<= (width-line (line b)) (* 80 (/ 10 19) (height b))))))
  (pre (or header body footer) (14-px-text ?))
  (assert root (and (14-px-text header) (14-px-text body) (14-px-text footer))))

;; A theorem about accessibility text being offscreen on yoga

(proof (accessible-offscreen accessible-offscreen yoga)
  (component header (id header))
  (component body (id body))
  (component footer (id footer))

  (assert footer (forall (b) (=> (accessibility-text b) (not (viewable b)))))

  (assert footer (<= (width footer) 2000))
  (assert footer (<= (raw (ml footer)) 1000))

  (pre footer (<= (left footer) 9000))
  (assert root (<= (left footer) 9000))

  (pre footer (<= 0 (width (parent footer) content) 2000))
  (assert root (<= 0 (width (parent footer) content) 2000))

  (pre footer (!= (prev footer) null))
  (pre footer (!= (parent footer) null))
  (pre footer (no-floats-exit* (prev footer)))
  (pre footer (non-negative-margins (prev footer)))
  (pre footer (> (height (prev footer)) 0))
  (pre footer (raw (not (firstish-box footer))))
  (pre footer (= (raw (ez.out (vflow footer))) (raw (ez.in footer))))

  (assert root (= (prev footer) body))
  (assert root (raw (not (firstish-box footer))))
  (assert * (=> (no-floats-enter ?) (no-floats-exit* ?)))
  (assert root (no-floats-enter root))
  (assert root (float-flow-in root header))
  (assert root (float-flow-across header body footer))
  (assert * (non-negative-margins ?))
  (assert * (> (height ?) 0)))

