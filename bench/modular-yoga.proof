;; -*- mode: scheme -*-

(define (is-interactive b)
  (matches b (tag a) (tag input) (tag button)))

(define (onscreen b)
  (and (>= (top b) (top root)) (>= (left b) (left root))))

(theorem (floats-reasonable b)
  (=> (matches b (id header) (id body) (id footer))
      (raw (ez.inside (ez.out b) b))))

(proof (lem1 floats-reasonable :w (between 800 1920) :h (between 600 1024) :fs (between 16 32))
 (assert root (forall (b) (=> (matches b (id footer)) (raw (ez.inside (ez.out b) b))))))

(theorem (interactive-onscreen b)
  (=> (is-interactive b) (onscreen b)))

(proof (yoga interactive-onscreen :w (between 800 1920) :h (between 600 1280) :fs (between 16 32))
  (component header (id header))
  (component body (id body))
  (component footer (id footer))

  (assert root (<= (raw (bottom-border header)) (raw (top-border body))
                   (raw (bottom-border body)) (raw (top-border footer))))
  (assert root (=> 
                (raw (ez.inside (ez.out header) header))
                (raw (ez.inside (ez.out body) body))
                (>= (width footer) 200)))
  (assert root (=> 
                (raw (ez.inside (ez.out header) header))
                (raw (ez.inside (ez.out body) body))
                (and (onscreen header) (onscreen body) (onscreen footer))))

  (spec header (raw (no-margins header)))
  (spec header (> (height header) 0))
  (spec header
    (forall (a)
            (=> (onscreen header) (=> (is-interactive a) (onscreen a)))))

  (spec body (raw (non-negative-margins body)))
  (spec body (> (height body) 0))

  (spec footer (raw (no-margins footer)))
  (spec footer (> (height footer) 0))

  (spec footer
    (forall (a)
            (=> (raw (ez.outside (ez.in footer) footer))
                (onscreen footer)
                (>= (width footer) 200)
                (=> (is-interactive a) (onscreen a)))))

  (assert root (=> (raw (ez.inside (ez.out body) body))
                   (raw (ez.outside (ez.in footer) footer))))

  (lemma (floats-reasonable header))
  (lemma (floats-reasonable body)))
